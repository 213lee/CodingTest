/*
Leo는 카펫을 사러 갔다가 아래 그림과 같이 중앙에는 노란색으로 칠해져 있고 테두리 1줄은 갈색으로 칠해져 있는 격자 모양 카펫을 봤습니다.

carpet.png

Leo는 집으로 돌아와서 아까 본 카펫의 노란색과 갈색으로 색칠된 격자의 개수는 기억했지만, 전체 카펫의 크기는 기억하지 못했습니다.

Leo가 본 카펫에서 갈색 격자의 수 brown, 노란색 격자의 수 yellow가 매개변수로 주어질 때 카펫의 가로, 세로 크기를 순서대로 배열에 담아 return 하도록 solution 함수를 작성해주세요.
제한사항

    갈색 격자의 수 brown은 8 이상 5,000 이하인 자연수입니다.
    노란색 격자의 수 yellow는 1 이상 2,000,000 이하인 자연수입니다.
    카펫의 가로 길이는 세로 길이와 같거나, 세로 길이보다 깁니다.

입출력 예
brown 	yellow 	return
10 	    2   	[4, 3]
8 	    1 	    [3, 3]
24 	    24 	    [8, 6]
*/


#include<iostream>
#include<vector>

/*
    1. brown타일과 yellow 타일의 갯수의 합은 전체 타일 가로(x) * 세로(y)
        == (x * y) == (total = brown + yellow)  

    2. 테두리 1줄만 갈색이므로 가능한 x, y 쌍에서 yellow의 갯수는 (x - 2) * (y - 2) 
        == (x - 2) * (y - 2) = yellow
    
    yellow가 존재하기 위해선 무조건 x, y가 3이상의 자연수
*/
std::vector<int> solution(int brown, int yellow)
{
    int total = brown + yellow;
    int half = total * 0.5f;
 
    for (int y = 3; y <= half; y++)
    {
        if (total % y == 0)
        {
            int x = total / y;
            if (yellow == (x - 2) * (y - 2))
                return { x, y };
        }
    }
}

int main()
{

}

/*
* 첫번째 답안
* 
    #include <string>
    #include <vector>

    using namespace std;

    vector<int> solution(int brown, int yellow) {
        int height = 3;                                 //카펫이 가질 수 있는 최소 세로 길이
        int width = brown / 2 - height + 2;             //카펫이 가질 수 있는 최대 가로 길이  

        //가로가 세로보다 길다.
        //세로의 길이를 한칸씩 늘리고 가로의 길이를 한칸씩 줄이면서
        //brown 격자와 yellow 격자의 개수 합이 지정한 크기의 카펫 크기와 일치하는지 확인
        while (width >= height)
        {
            if (brown + yellow == height * width) break;

            width--; height++;
        }

        return { width, height };
    }

    //vector<int> solution(int brown, int yellow) {
    //    int yellowLine = 1;
    //
    //    int width, height;
    //    do
    //    {
    //        width = (brown - yellowLine * 2) / 2;
    //        height = yellowLine + 2;
    //        if (brown + yellow == width * height) break;
    //
    //        yellowLine++;
    //    } while (width > height);
    //
    //    return { width, height };
    //}
*/